pii <- i/N #Probability of extracting white from the choosen box
ri <- floor(runif(1, min = 0, max = 6)) #Randomly chosen box
sprintf("Randomly extracted box is: %i", ri)
n <- 100 #Nuober of extractions from selected box
s <- rbinom(n, 1, pii[ri+1]) #Random sampling from selected box using binomial distribution
x <- sum(s)
sprintf("Total number of extracted white balls: %i", x)
PBi = pii^x * (1-pii)^(n-x) / sum( pii^x * (1-pii)^(n-x) )
sprintf("Probability associated to box %i is: %f", seq.int(0, 5), PBi)
#Calculating probabilities at each step
X <- seq.int(1, n)
Y <- c()
for (j in 1:n){
x <- sum(s[1:j])
PBi = pii^x * (1-pii)^(j-x) / sum( pii^x * (1-pii)^(j-x) )
Y <- append(Y, PBi)
}
#Aesthetic stuff for the graphs
annotations = list(
list(
x = 0.2,
y = 1.0,
text = "<b>B0</b>",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 1.0,
text = "<b>B1</b>",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.2,
y = 0.63,
text = "<b>B2</b>",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 0.63,
text = "<b>B3</b>",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.2,
y = 0.24,
text = "<b>B4</b>",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 0.24,
text = "<b>B5</b>",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
)
)
#Plotting
B0 <- plot_ly(x = X, y = Y[seq(1, length(Y), 6)], name = 'P(B0)', type = 'scatter', mode = 'lines+markers')
B0 <- B0 %>% layout(xaxis=list(title=""), yaxis=list(title="P"))
B0
B1 <- plot_ly(x = X, y = Y[seq(2, length(Y), 6)], name = 'P(B1)', type = 'scatter', mode = 'lines+markers')
B1 <- B1 %>% layout(xaxis=list(title=""), yaxis=list(title="P"))
B2 <- plot_ly(x = X, y = Y[seq(3, length(Y), 6)], name = 'P(B2)', type = 'scatter', mode = 'lines+markers')
B2 <- B2 %>% layout(xaxis=list(title=""), yaxis=list(title="P"))
B3 <- plot_ly(x = X, y = Y[seq(4, length(Y), 6)], name = 'P(B3)', type = 'scatter', mode = 'lines+markers')
B3 <- B3 %>% layout(xaxis=list(title=""), yaxis=list(title="P"))
B4 <- plot_ly(x = X, y = Y[seq(5, length(Y), 6)], name = 'P(B4)', type = 'scatter', mode = 'lines+markers')
B4 <- B4 %>% layout(xaxis=list(title="j"), yaxis=list(title="P"))
B5 <- plot_ly(x = X, y = Y[seq(6, length(Y), 6)], name = 'P(B5)', type = 'scatter', mode = 'lines+markers')
B5 <- B5 %>% layout(xaxis=list(title="j"), yaxis=list(title="P"))
Fig <- plotly::subplot(B0, B1, B2, B3, B4, B5, nrows = 3, titleY = TRUE, titleX = TRUE, margin = 0.1, which_layout = "Merge")
Fig <- Fig %>% layout(title = '<b>Probability associated to each box</b>', yaxis = list(range=c(-0, 1)), yaxis2 = list(range=c(-0, 1)), yaxis3 = list(range=c(0, 1)), yaxis4 = list(range=c(0, 1)), yaxis5 = list(range=c(0, 1)), yaxis6 = list(range=c(0, 1)))
Fig <- Fig %>%layout(annotations = annotations)
Fig
library(plotly)
#EXERCISE 1
a <- 1
c <- 1.5
b <- 2
#PDF
f_1_d <- function(a, c, b, x){
f <- (a<=x & x<c)*((2*(x-a))/((b-a)*(c-a)))+(c<=x & x<=b)*((2*(b-x))/((b-a)*(b-c)))+(x<a | x>b)*(0)
return(f)
}
#CDF
f_1_c <- function(a, c, b, x){
f <- c()
for (j in x) {
f <- append(f, integrate(f_1_d, lower = 1, upper = j, a=a, c=c, b=b)$value)
}
return(f)
}
#Quantiles function
inverse <- function (f, l=1, u=2) {function (y) uniroot((function (x) f(x) - y), lower = l, upper = u)[1]}
f_1_q <- inverse(function(x) {integrate(f_1_d, lower = 1, upper = x, a=a, c=c, b=b)$value})
#Random sampling function following given PDF
f_1_r <- function(n_samples){
y <- c()
for (j in 1:n_samples){
ru <- runif(1,0,1)
y[j]<-f_1_q(ru)$root
}
return(y)
}
x <- seq(0, 3, by = 0.01)
#Plotting PDF and CDF
p_1 <- plot_ly(x = x, y = f_1_d(a=a, c=c, b=b, x), type = "scatter", mode = "lines") %>%
layout(title="<b>Probability distribution function</b>", xaxis=list(title="x"),            yaxis=list(title="Probability density"))
p_2 <- plot_ly(x = x, y = f_1_c(a=a, c=c, b=b, x), type = "scatter", mode = "lines") %>%
layout(title="<b>Cumulative distribution function</b>", xaxis=list(title="x"),             yaxis=list(title="Cumulative probability"))
Fig <- plotly::subplot(p_1, p_2, nrows = 2, titleY = TRUE, titleX = TRUE, margin = 0.2, which_layout = "Merge", heights = c(0.5, 0.5), widths = 0.7)
library(plotly)
#EXERCISE 1
a <- 1
c <- 1.5
b <- 2
#PDF
f_1_d <- function(a, c, b, x){
f <- (a<=x & x<c)*((2*(x-a))/((b-a)*(c-a)))+(c<=x & x<=b)*((2*(b-x))/((b-a)*(b-c)))+(x<a | x>b)*(0)
return(f)
}
#CDF
f_1_c <- function(a, c, b, x){
f <- c()
for (j in x) {
f <- append(f, integrate(f_1_d, lower = 1, upper = j, a=a, c=c, b=b)$value)
}
return(f)
}
#Quantiles function
inverse <- function (f, l=1, u=2) {function (y) uniroot((function (x) f(x) - y), lower = l, upper = u)[1]}
f_1_q <- inverse(function(x) {integrate(f_1_d, lower = 1, upper = x, a=a, c=c, b=b)$value})
#Random sampling function following given PDF
f_1_r <- function(n_samples){
y <- c()
for (j in 1:n_samples){
ru <- runif(1,0,1)
y[j]<-f_1_q(ru)$root
}
return(y)
}
x <- seq(0, 3, by = 0.01)
#Plotting PDF and CDF
p_1 <- plot_ly(x = x, y = f_1_d(a=a, c=c, b=b, x), type = "scatter", mode = "lines") %>%
layout(title="<b>Probability distribution function</b>", xaxis=list(title="x"),            yaxis=list(title="Probability density"))
p_2 <- plot_ly(x = x, y = f_1_c(a=a, c=c, b=b, x), type = "scatter", mode = "lines") %>%
layout(title="<b>Cumulative distribution function</b>", xaxis=list(title="x"),             yaxis=list(title="Cumulative probability"))
Fig <- plotly::subplot(p_1, p_2, nrows = 2, titleY = TRUE, titleX = TRUE, margin = 0.2, which_layout = "Merge", heights = c(0.5, 0.5), widths = 0.7)
Fig <- Fig %>% layout(title = 'Triangular distribution functions')
annotations = list(
list(
x = 0.5,
y = 1.0,
text = "Probability distribution function",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.5,
y = 0.4,
text = "Cumulative distribution function",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
)
)
Fig <- Fig %>%layout(annotations = annotations)
Fig
#Plotting histogram superimposing PDF
hist(x = f_1_r(10000), main = "Histogram of triangular distribution", xlab = "x", ylab = "Probability density", prob = TRUE, xlim = c(0.5, 2.5), ylim = c(0, 2))
lines(x, f_1_d(a=a, c=c, b=b, x), col = "red", lwd = 2)
#EXERCISE 2
x <- seq(from = 0, to = 10, by = 0.1)
n <- seq(from = 0, to = 10, by = 1)
#Following plots are done considering k as a variable, hence without keping fixed a priori the value of k
e_d <- dexp(x, rate = 1)
E_e_d <- 1
MUB_e_d <- E_e_d / x
e_p <- pexp(x, rate = 1, lower.tail = FALSE)
g_1 <- plot_ly(x = x, y = e_d, name = 'Exponential pdf', type = 'scatter', mode = 'lines')
g_1 <- g_1 %>% add_trace(y = MUB_e_d, name = 'Markov\' s upper\nbound', mode = 'lines')
g_1 <- g_1 %>% add_trace(y = e_p, name = 'G(k)\n', mode = 'lines')
g_1 <- g_1 %>% layout(title="<b>Exponential probability distribution</b>", xaxis=list(title="x (k)"),        yaxis=list(title=""))
#g_1
u_d <- dunif(x, min = 3, max = 5)
E_u_d <- (3 + 5)/2
MUB_u_d <- E_u_d / x
u_p <- punif(x, min = 3, max = 5, lower.tail = FALSE)
g_2 <- plot_ly(x = x, y = u_d, name = 'Uniform pdf', type = 'scatter', mode = 'lines')
g_2 <- g_2 %>% add_trace(y = MUB_u_d, name = 'Markov\' s upper\nbound', mode = 'lines')
g_2 <- g_2 %>% add_trace(y = u_p, name = 'G(k)\n', mode = 'lines')
g_2 <- g_2 %>% layout(title="<b>Uniform probability distribution</b>", xaxis=list(title="x (k)"),            yaxis=list(title=""))
#g_2
b_d <- dbinom(x = n, size = 1, prob = 0.5)
E_b_d <- 1 * 0.5
MUB_b_d <- E_b_d / n
b_p <- pbinom(n, size = 1, prob = 0.5, lower.tail = FALSE)
g_3 <- plot_ly(x = n, y = b_d, name = 'Binomial pdf', type = 'scatter', mode = 'lines+markers')
g_3 <- g_3 %>% add_trace(y = MUB_b_d, name = 'Markov\' s upper\nbound', mode = 'lines+markers')
g_3 <- g_3 %>% add_trace(y = b_p, name = 'G(k)\n', mode = 'lines+markers')
g_3 <- g_3 %>% layout(title="<b>Binomial probability distribution</b>", xaxis=list(title="x (k)"),           yaxis=list(title=""))
#g_3
p_d <- dpois(n, lambda = 0.5)
E_p_d <- 0.5
MUB_p_d <- E_p_d / n
p_p <- ppois(n, lambda = 0.5, lower.tail = FALSE)
g_4 <- plot_ly(x = n, y = p_d, name = 'Poisson pdf', type = 'scatter', mode = 'lines+markers')
g_4 <- g_4 %>% add_trace(y = MUB_p_d, name = 'Markov\' s upper\nbound', mode = 'lines+markers')
g_4 <- g_4 %>% add_trace(y = p_p, name = 'G(k)\n', mode = 'lines+markers')
g_4 <- g_4 %>% layout(title="<b>Poisson probability distribution</b>", xaxis=list(title="x (k)"),            yaxis=list(title=""))
#g_4
Fig <- plotly::subplot(g_1, g_2, g_3, g_4, nrows = 2, titleY = TRUE, titleX = TRUE, margin = 0.1, which_layout = "Merge")
Fig <- Fig %>% layout(title = 'Markov\'s inequality for various probability distribution functions',                 yaxis = list(range=c(0, 2)), yaxis2 = list(range=c(0, 1.5)), yaxis3 = list(range=c(0,                 0.6)), yaxis4 = list(range=c(0, 0.7)))
annotations = list(
list(
x = 0.2,
y = 1.0,
text = "<b>Exponential probability distribution</b>",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 1,
text = "<b>Uniform probability distribution</b>",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.2,
y = 0.4,
text = "<b>Binomial probability distribution</b>",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 0.4,
text = "<b>Poisson probability distribution</b>",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
)
)
Fig <- Fig %>%layout(annotations = annotations)
Fig
#EXERCISE 3
#Following plots are done considering k as a variable, hence without keping fixed a priori the value of k
k <- seq(from = 0, to = 15, by = 0.1)
n <- seq(from = 0, to = 15, by = 1)
CI_k <- 1 - (1 / (k^2))
CI_n <- 1 - (1 / (n^2))
E_n_d <- 3
SD_n_d <- 5
#n_d <- dnorm(k, mean = E_n_d, sd = SD_n_d)
n_p <- pnorm(E_n_d+(k*SD_n_d), mean = E_n_d, sd = SD_n_d) - pnorm(E_n_d-(k*SD_n_d), mean = E_n_d, sd = SD_n_d)
g_1 <- plot_ly(x = k, y = CI_k, name = '1 - 1 \\ (k^2)', type = 'scatter', mode = 'lines')
g_1 <- g_1 %>% add_trace(y = n_p, name = "Chebyshev\'s inequality", mode = 'lines')
#g_1 <- g_1 %>% add_trace(y = n_d, name = 'Normal pdf', type = 'scatter', mode = 'lines')
g_1 <- g_1 %>% layout(title="<b>Normal probability distribution</b>", xaxis=list(title="k"),                 yaxis=list(title=""))
#g_1
r_e_d <- 1
E_e_d <- 1/r_e_d
SD_e_d <- sqrt(1/(r_e_d^2))
#e_d <- dexp(k, rate = r_e_d)
e_p <- pexp(E_e_d+(k*SD_e_d), rate = r_e_d) - pexp(E_e_d-(k*SD_e_d), rate = r_e_d)
g_2 <- plot_ly(x = k, y = CI_k, name = '1 - 1 \\ (k^2)', type = 'scatter', mode = 'lines')
g_2 <- g_2 %>% add_trace(y = e_p, name = "Chebyshev\'s inequality", mode = 'lines')
#g_2 <- g_2 %>% add_trace(y = e_d, name = 'Exponential pdf', type = 'scatter', mode = 'lines')
g_2 <- g_2 %>% layout(title="<b>Exponential probability distribution</b>", xaxis=list(title="k"),            yaxis=list(title=""))
#g_2
u_m <- 1 - sqrt(2)
u_M <- 1 + sqrt(2)
E_u_d <- (u_m + u_M)/1
SD_u_d <- (u_M - u_m)/sqrt(12)
#u_d <- dunif(k, min = u_m, max = u_M)
u_p <- punif(E_u_d+(k*SD_u_d), min = u_m, max = u_M) - punif(E_u_d-(k*SD_u_d), min = u_m, max = u_M)
g_3 <- plot_ly(x = k, y = CI_k, name = '1 - 1 \\ (k^2)', type = 'scatter', mode = 'lines')
g_3 <- g_3 %>% add_trace(y = u_p, name = "Chebyshev\'s inequality", mode = 'lines')
#g_3 <- g_3 %>% add_trace(y = u_d, name = 'Uniform pdf', type = 'scatter', mode = 'lines')
g_3 <- g_3 %>% layout(title="<b>Uniform probability distribution</b>", xaxis=list(title="k"),                yaxis=list(title=""))
#g_3
l_p_d <- 1/3
E_p_d <- l_p_d
SD_p_d <- sqrt(l_p_d)
#p_d <- dpois(n, lambda = l_p_d)
p_p <- ppois(E_p_d+(n*SD_p_d), lambda = l_p_d) - ppois(E_p_d-(n*SD_p_d), lambda = l_p_d)
g_4 <- plot_ly(x = n, y = CI_n, name = '1 - 1 \\ (k^2)', type = 'scatter', mode = 'lines')
g_4 <- g_4 %>% add_trace(y = p_p, name = "Chebyshev\'s inequality", mode = 'lines')
#g_4 <- g_4 %>% add_trace(y = p_d, name = 'Poisson pdf', type = 'scatter', mode = 'lines')
g_4 <- g_4 %>% layout(title="<b>Poisson probability distribution</b>", xaxis=list(title="k"),                yaxis=list(title=""))
#g_4
Fig <- plotly::subplot(g_1, g_2, g_3, g_4, nrows = 2, titleY = TRUE, titleX = TRUE, margin = 0.1, which_layout = "Merge")
Fig <- Fig %>% layout(title = 'Chebyshev\'s inequality for various probability distribution functions', yaxis = list(range=c(-0.5, 1.25)), yaxis2 = list(range=c(-0.5, 1.25)), yaxis3 =           list(range=c(0, 1.1)), yaxis4 = list(range=c(0, 1.25)))
annotations = list(
list(
x = 0.2,
y = 1.0,
text = "<b>Normal probability distribution</b>",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 1,
text = "<b>Exponential probability distribution</b>",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.2,
y = 0.4,
text = "<b>Uniform probability distribution</b>",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 0.4,
text = "<b>Poisson probability distribution</b>",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
)
)
Fig <- Fig %>%layout(annotations = annotations)
Fig
#EXERCISE 4
N <- 5 #Total number of balls in each box (constant)
i <- 0:N #Number of white balls for each box (or box index)
pii <- i/N #Probability of extracting white from the choosen box
print("Six box toy model. Press b for Black, w for White, any other key to Quit")
j <- 1
color <- c()
x <- c()
P <- c()
#Aesthetic stuff for the graphs
annotations = list(
list(
x = 0.2,
y = 1.0,
text = "<b>B0</b>",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 1.0,
text = "<b>B1</b>",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.2,
y = 0.63,
text = "<b>B2</b>",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 0.63,
text = "<b>B3</b>",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.2,
y = 0.24,
text = "<b>B4</b>",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
),
list(
x = 0.8,
y = 0.24,
text = "<b>B5</b>",
xref = "paper",
yref = "paper",
xanchor = "center",
yanchor = "bottom",
showarrow = FALSE
)
)
#Input of extractions, probability calculations and graphs plotting
while (j >= 1) {
extr <- readline("Extracted color > ")
extr <- as.character(extr)
if (extr == 'b') {
color <- append(color, 0)
tot_w <- sum(color)
PBi <- pii^tot_w * (1-pii)^(j-tot_w) / sum( pii^tot_w * (1-pii)^(j-tot_w) )
P <- append(P, PBi)
print("Box probabilities:")
print(PBi)
x <- append(x, j)
B0 <- plot_ly(x = x, y = P[seq(1, length(P), 6)], name = 'P(B0)', type = 'scatter', mode = 'lines+markers')
B0 <- B0 %>% layout(xaxis=list(title=""), yaxis=list(title="P"))
B1 <- plot_ly(x = x, y = P[seq(2, length(P), 6)], name = 'P(B1)', type = 'scatter', mode = 'lines+markers')
B1 <- B1 %>% layout(xaxis=list(title=""), yaxis=list(title="P"))
B2 <- plot_ly(x = x, y = P[seq(3, length(P), 6)], name = 'P(B2)', type = 'scatter', mode = 'lines+markers')
B2 <- B2 %>% layout(xaxis=list(title=""), yaxis=list(title="P"))
B3 <- plot_ly(x = x, y = P[seq(4, length(P), 6)], name = 'P(B3)', type = 'scatter', mode = 'lines+markers')
B3 <- B3 %>% layout(xaxis=list(title=""), yaxis=list(title="P"))
B4 <- plot_ly(x = x, y = P[seq(5, length(P), 6)], name = 'P(B4)', type = 'scatter', mode = 'lines+markers')
B4 <- B4 %>% layout(xaxis=list(title="j"), yaxis=list(title="P"))
B5 <- plot_ly(x = x, y = P[seq(6, length(P), 6)], name = 'P(B5)', type = 'scatter', mode = 'lines+markers')
B5 <- B5 %>% layout(xaxis=list(title="j"), yaxis=list(title="P"))
Fig <- plotly::subplot(B0, B1, B2, B3, B4, B5, nrows = 3, titleY = TRUE, titleX = TRUE, margin = 0.1, which_layout = "Merge")
Fig <- Fig %>% layout(title = '<b>Probability associated to each box</b>', yaxis = list(range=c(-0, 1)), yaxis2 = list(range=c(-0, 1)), yaxis3 = list(range=c(0, 1)), yaxis4 = list(range=c(0, 1)), yaxis5 = list(range=c(0, 1)), yaxis6 = list(range=c(0, 1)))
Fig <- Fig %>%layout(annotations = annotations)
Fig
j <- j + 1
}
else if (extr == 'w') {
color <- append(color, 1)
tot_w <- sum(color)
PBi <- pii^tot_w * (1-pii)^(j-tot_w) / sum( pii^tot_w * (1-pii)^(j-tot_w) )
P <- append(P, PBi)
print("Box probabilities:")
print(PBi)
x <- append(x, j)
B0 <- plot_ly(x = x, y = P[seq(1, length(P), 6)], name = 'P(B0)', type = 'scatter', mode = 'lines+markers')
B0 <- B0 %>% layout(xaxis=list(title=""), yaxis=list(title="P"))
B1 <- plot_ly(x = x, y = P[seq(2, length(P), 6)], name = 'P(B1)', type = 'scatter', mode = 'lines+markers')
B1 <- B1 %>% layout(xaxis=list(title=""), yaxis=list(title="P"))
B2 <- plot_ly(x = x, y = P[seq(3, length(P), 6)], name = 'P(B2)', type = 'scatter', mode = 'lines+markers')
B2 <- B2 %>% layout(xaxis=list(title=""), yaxis=list(title="P"))
B3 <- plot_ly(x = x, y = P[seq(4, length(P), 6)], name = 'P(B3)', type = 'scatter', mode = 'lines+markers')
B3 <- B3 %>% layout(xaxis=list(title=""), yaxis=list(title="P"))
B4 <- plot_ly(x = x, y = P[seq(5, length(P), 6)], name = 'P(B4)', type = 'scatter', mode = 'lines+markers')
B4 <- B4 %>% layout(xaxis=list(title="j"), yaxis=list(title="P"))
B5 <- plot_ly(x = x, y = P[seq(6, length(P), 6)], name = 'P(B5)', type = 'scatter', mode = 'lines+markers')
B5 <- B5 %>% layout(xaxis=list(title="j"), yaxis=list(title="P"))
Fig <- plotly::subplot(B0, B1, B2, B3, B4, B5, nrows = 3, titleY = TRUE, titleX = TRUE, margin = 0.1, which_layout = "Merge")
Fig <- Fig %>% layout(title = '<b>Probability associated to each box</b>', yaxis = list(range=c(-0, 1)), yaxis2 = list(range=c(-0, 1)), yaxis3 = list(range=c(0, 1)), yaxis4 = list(range=c(0, 1)), yaxis5 = list(range=c(0, 1)), yaxis6 = list(range=c(0, 1)))
Fig <- Fig %>%layout(annotations = annotations)
Fig
j <- j + 1
}
else {
print("Quitted from loop")
j <- -7
break
}
}
